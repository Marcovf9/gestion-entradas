
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Zona
 * 
 */
export type Zona = $Result.DefaultSelection<Prisma.$ZonaPayload>
/**
 * Model Venta
 * 
 */
export type Venta = $Result.DefaultSelection<Prisma.$VentaPayload>
/**
 * Model Butaca
 * 
 */
export type Butaca = $Result.DefaultSelection<Prisma.$ButacaPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Zonas
 * const zonas = await prisma.zona.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Zonas
   * const zonas = await prisma.zona.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.zona`: Exposes CRUD operations for the **Zona** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Zonas
    * const zonas = await prisma.zona.findMany()
    * ```
    */
  get zona(): Prisma.ZonaDelegate<ExtArgs>;

  /**
   * `prisma.venta`: Exposes CRUD operations for the **Venta** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ventas
    * const ventas = await prisma.venta.findMany()
    * ```
    */
  get venta(): Prisma.VentaDelegate<ExtArgs>;

  /**
   * `prisma.butaca`: Exposes CRUD operations for the **Butaca** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Butacas
    * const butacas = await prisma.butaca.findMany()
    * ```
    */
  get butaca(): Prisma.ButacaDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Zona: 'Zona',
    Venta: 'Venta',
    Butaca: 'Butaca'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "zona" | "venta" | "butaca"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Zona: {
        payload: Prisma.$ZonaPayload<ExtArgs>
        fields: Prisma.ZonaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ZonaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZonaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ZonaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZonaPayload>
          }
          findFirst: {
            args: Prisma.ZonaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZonaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ZonaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZonaPayload>
          }
          findMany: {
            args: Prisma.ZonaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZonaPayload>[]
          }
          create: {
            args: Prisma.ZonaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZonaPayload>
          }
          createMany: {
            args: Prisma.ZonaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ZonaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZonaPayload>[]
          }
          delete: {
            args: Prisma.ZonaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZonaPayload>
          }
          update: {
            args: Prisma.ZonaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZonaPayload>
          }
          deleteMany: {
            args: Prisma.ZonaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ZonaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ZonaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZonaPayload>
          }
          aggregate: {
            args: Prisma.ZonaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateZona>
          }
          groupBy: {
            args: Prisma.ZonaGroupByArgs<ExtArgs>
            result: $Utils.Optional<ZonaGroupByOutputType>[]
          }
          count: {
            args: Prisma.ZonaCountArgs<ExtArgs>
            result: $Utils.Optional<ZonaCountAggregateOutputType> | number
          }
        }
      }
      Venta: {
        payload: Prisma.$VentaPayload<ExtArgs>
        fields: Prisma.VentaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VentaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VentaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VentaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VentaPayload>
          }
          findFirst: {
            args: Prisma.VentaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VentaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VentaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VentaPayload>
          }
          findMany: {
            args: Prisma.VentaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VentaPayload>[]
          }
          create: {
            args: Prisma.VentaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VentaPayload>
          }
          createMany: {
            args: Prisma.VentaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VentaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VentaPayload>[]
          }
          delete: {
            args: Prisma.VentaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VentaPayload>
          }
          update: {
            args: Prisma.VentaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VentaPayload>
          }
          deleteMany: {
            args: Prisma.VentaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VentaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VentaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VentaPayload>
          }
          aggregate: {
            args: Prisma.VentaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVenta>
          }
          groupBy: {
            args: Prisma.VentaGroupByArgs<ExtArgs>
            result: $Utils.Optional<VentaGroupByOutputType>[]
          }
          count: {
            args: Prisma.VentaCountArgs<ExtArgs>
            result: $Utils.Optional<VentaCountAggregateOutputType> | number
          }
        }
      }
      Butaca: {
        payload: Prisma.$ButacaPayload<ExtArgs>
        fields: Prisma.ButacaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ButacaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ButacaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ButacaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ButacaPayload>
          }
          findFirst: {
            args: Prisma.ButacaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ButacaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ButacaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ButacaPayload>
          }
          findMany: {
            args: Prisma.ButacaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ButacaPayload>[]
          }
          create: {
            args: Prisma.ButacaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ButacaPayload>
          }
          createMany: {
            args: Prisma.ButacaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ButacaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ButacaPayload>[]
          }
          delete: {
            args: Prisma.ButacaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ButacaPayload>
          }
          update: {
            args: Prisma.ButacaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ButacaPayload>
          }
          deleteMany: {
            args: Prisma.ButacaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ButacaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ButacaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ButacaPayload>
          }
          aggregate: {
            args: Prisma.ButacaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateButaca>
          }
          groupBy: {
            args: Prisma.ButacaGroupByArgs<ExtArgs>
            result: $Utils.Optional<ButacaGroupByOutputType>[]
          }
          count: {
            args: Prisma.ButacaCountArgs<ExtArgs>
            result: $Utils.Optional<ButacaCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ZonaCountOutputType
   */

  export type ZonaCountOutputType = {
    butacas: number
  }

  export type ZonaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    butacas?: boolean | ZonaCountOutputTypeCountButacasArgs
  }

  // Custom InputTypes
  /**
   * ZonaCountOutputType without action
   */
  export type ZonaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZonaCountOutputType
     */
    select?: ZonaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ZonaCountOutputType without action
   */
  export type ZonaCountOutputTypeCountButacasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ButacaWhereInput
  }


  /**
   * Count Type VentaCountOutputType
   */

  export type VentaCountOutputType = {
    butacas: number
  }

  export type VentaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    butacas?: boolean | VentaCountOutputTypeCountButacasArgs
  }

  // Custom InputTypes
  /**
   * VentaCountOutputType without action
   */
  export type VentaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VentaCountOutputType
     */
    select?: VentaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VentaCountOutputType without action
   */
  export type VentaCountOutputTypeCountButacasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ButacaWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Zona
   */

  export type AggregateZona = {
    _count: ZonaCountAggregateOutputType | null
    _avg: ZonaAvgAggregateOutputType | null
    _sum: ZonaSumAggregateOutputType | null
    _min: ZonaMinAggregateOutputType | null
    _max: ZonaMaxAggregateOutputType | null
  }

  export type ZonaAvgAggregateOutputType = {
    id: number | null
    precio: number | null
  }

  export type ZonaSumAggregateOutputType = {
    id: number | null
    precio: number | null
  }

  export type ZonaMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    precio: number | null
    color: string | null
  }

  export type ZonaMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    precio: number | null
    color: string | null
  }

  export type ZonaCountAggregateOutputType = {
    id: number
    nombre: number
    precio: number
    color: number
    _all: number
  }


  export type ZonaAvgAggregateInputType = {
    id?: true
    precio?: true
  }

  export type ZonaSumAggregateInputType = {
    id?: true
    precio?: true
  }

  export type ZonaMinAggregateInputType = {
    id?: true
    nombre?: true
    precio?: true
    color?: true
  }

  export type ZonaMaxAggregateInputType = {
    id?: true
    nombre?: true
    precio?: true
    color?: true
  }

  export type ZonaCountAggregateInputType = {
    id?: true
    nombre?: true
    precio?: true
    color?: true
    _all?: true
  }

  export type ZonaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Zona to aggregate.
     */
    where?: ZonaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Zonas to fetch.
     */
    orderBy?: ZonaOrderByWithRelationInput | ZonaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ZonaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Zonas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Zonas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Zonas
    **/
    _count?: true | ZonaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ZonaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ZonaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ZonaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ZonaMaxAggregateInputType
  }

  export type GetZonaAggregateType<T extends ZonaAggregateArgs> = {
        [P in keyof T & keyof AggregateZona]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateZona[P]>
      : GetScalarType<T[P], AggregateZona[P]>
  }




  export type ZonaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ZonaWhereInput
    orderBy?: ZonaOrderByWithAggregationInput | ZonaOrderByWithAggregationInput[]
    by: ZonaScalarFieldEnum[] | ZonaScalarFieldEnum
    having?: ZonaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ZonaCountAggregateInputType | true
    _avg?: ZonaAvgAggregateInputType
    _sum?: ZonaSumAggregateInputType
    _min?: ZonaMinAggregateInputType
    _max?: ZonaMaxAggregateInputType
  }

  export type ZonaGroupByOutputType = {
    id: number
    nombre: string
    precio: number
    color: string
    _count: ZonaCountAggregateOutputType | null
    _avg: ZonaAvgAggregateOutputType | null
    _sum: ZonaSumAggregateOutputType | null
    _min: ZonaMinAggregateOutputType | null
    _max: ZonaMaxAggregateOutputType | null
  }

  type GetZonaGroupByPayload<T extends ZonaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ZonaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ZonaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ZonaGroupByOutputType[P]>
            : GetScalarType<T[P], ZonaGroupByOutputType[P]>
        }
      >
    >


  export type ZonaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    precio?: boolean
    color?: boolean
    butacas?: boolean | Zona$butacasArgs<ExtArgs>
    _count?: boolean | ZonaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["zona"]>

  export type ZonaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    precio?: boolean
    color?: boolean
  }, ExtArgs["result"]["zona"]>

  export type ZonaSelectScalar = {
    id?: boolean
    nombre?: boolean
    precio?: boolean
    color?: boolean
  }

  export type ZonaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    butacas?: boolean | Zona$butacasArgs<ExtArgs>
    _count?: boolean | ZonaCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ZonaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ZonaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Zona"
    objects: {
      butacas: Prisma.$ButacaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      precio: number
      color: string
    }, ExtArgs["result"]["zona"]>
    composites: {}
  }

  type ZonaGetPayload<S extends boolean | null | undefined | ZonaDefaultArgs> = $Result.GetResult<Prisma.$ZonaPayload, S>

  type ZonaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ZonaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ZonaCountAggregateInputType | true
    }

  export interface ZonaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Zona'], meta: { name: 'Zona' } }
    /**
     * Find zero or one Zona that matches the filter.
     * @param {ZonaFindUniqueArgs} args - Arguments to find a Zona
     * @example
     * // Get one Zona
     * const zona = await prisma.zona.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ZonaFindUniqueArgs>(args: SelectSubset<T, ZonaFindUniqueArgs<ExtArgs>>): Prisma__ZonaClient<$Result.GetResult<Prisma.$ZonaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Zona that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ZonaFindUniqueOrThrowArgs} args - Arguments to find a Zona
     * @example
     * // Get one Zona
     * const zona = await prisma.zona.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ZonaFindUniqueOrThrowArgs>(args: SelectSubset<T, ZonaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ZonaClient<$Result.GetResult<Prisma.$ZonaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Zona that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZonaFindFirstArgs} args - Arguments to find a Zona
     * @example
     * // Get one Zona
     * const zona = await prisma.zona.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ZonaFindFirstArgs>(args?: SelectSubset<T, ZonaFindFirstArgs<ExtArgs>>): Prisma__ZonaClient<$Result.GetResult<Prisma.$ZonaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Zona that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZonaFindFirstOrThrowArgs} args - Arguments to find a Zona
     * @example
     * // Get one Zona
     * const zona = await prisma.zona.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ZonaFindFirstOrThrowArgs>(args?: SelectSubset<T, ZonaFindFirstOrThrowArgs<ExtArgs>>): Prisma__ZonaClient<$Result.GetResult<Prisma.$ZonaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Zonas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZonaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Zonas
     * const zonas = await prisma.zona.findMany()
     * 
     * // Get first 10 Zonas
     * const zonas = await prisma.zona.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const zonaWithIdOnly = await prisma.zona.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ZonaFindManyArgs>(args?: SelectSubset<T, ZonaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ZonaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Zona.
     * @param {ZonaCreateArgs} args - Arguments to create a Zona.
     * @example
     * // Create one Zona
     * const Zona = await prisma.zona.create({
     *   data: {
     *     // ... data to create a Zona
     *   }
     * })
     * 
     */
    create<T extends ZonaCreateArgs>(args: SelectSubset<T, ZonaCreateArgs<ExtArgs>>): Prisma__ZonaClient<$Result.GetResult<Prisma.$ZonaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Zonas.
     * @param {ZonaCreateManyArgs} args - Arguments to create many Zonas.
     * @example
     * // Create many Zonas
     * const zona = await prisma.zona.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ZonaCreateManyArgs>(args?: SelectSubset<T, ZonaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Zonas and returns the data saved in the database.
     * @param {ZonaCreateManyAndReturnArgs} args - Arguments to create many Zonas.
     * @example
     * // Create many Zonas
     * const zona = await prisma.zona.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Zonas and only return the `id`
     * const zonaWithIdOnly = await prisma.zona.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ZonaCreateManyAndReturnArgs>(args?: SelectSubset<T, ZonaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ZonaPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Zona.
     * @param {ZonaDeleteArgs} args - Arguments to delete one Zona.
     * @example
     * // Delete one Zona
     * const Zona = await prisma.zona.delete({
     *   where: {
     *     // ... filter to delete one Zona
     *   }
     * })
     * 
     */
    delete<T extends ZonaDeleteArgs>(args: SelectSubset<T, ZonaDeleteArgs<ExtArgs>>): Prisma__ZonaClient<$Result.GetResult<Prisma.$ZonaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Zona.
     * @param {ZonaUpdateArgs} args - Arguments to update one Zona.
     * @example
     * // Update one Zona
     * const zona = await prisma.zona.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ZonaUpdateArgs>(args: SelectSubset<T, ZonaUpdateArgs<ExtArgs>>): Prisma__ZonaClient<$Result.GetResult<Prisma.$ZonaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Zonas.
     * @param {ZonaDeleteManyArgs} args - Arguments to filter Zonas to delete.
     * @example
     * // Delete a few Zonas
     * const { count } = await prisma.zona.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ZonaDeleteManyArgs>(args?: SelectSubset<T, ZonaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Zonas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZonaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Zonas
     * const zona = await prisma.zona.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ZonaUpdateManyArgs>(args: SelectSubset<T, ZonaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Zona.
     * @param {ZonaUpsertArgs} args - Arguments to update or create a Zona.
     * @example
     * // Update or create a Zona
     * const zona = await prisma.zona.upsert({
     *   create: {
     *     // ... data to create a Zona
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Zona we want to update
     *   }
     * })
     */
    upsert<T extends ZonaUpsertArgs>(args: SelectSubset<T, ZonaUpsertArgs<ExtArgs>>): Prisma__ZonaClient<$Result.GetResult<Prisma.$ZonaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Zonas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZonaCountArgs} args - Arguments to filter Zonas to count.
     * @example
     * // Count the number of Zonas
     * const count = await prisma.zona.count({
     *   where: {
     *     // ... the filter for the Zonas we want to count
     *   }
     * })
    **/
    count<T extends ZonaCountArgs>(
      args?: Subset<T, ZonaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ZonaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Zona.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZonaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ZonaAggregateArgs>(args: Subset<T, ZonaAggregateArgs>): Prisma.PrismaPromise<GetZonaAggregateType<T>>

    /**
     * Group by Zona.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZonaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ZonaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ZonaGroupByArgs['orderBy'] }
        : { orderBy?: ZonaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ZonaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetZonaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Zona model
   */
  readonly fields: ZonaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Zona.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ZonaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    butacas<T extends Zona$butacasArgs<ExtArgs> = {}>(args?: Subset<T, Zona$butacasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ButacaPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Zona model
   */ 
  interface ZonaFieldRefs {
    readonly id: FieldRef<"Zona", 'Int'>
    readonly nombre: FieldRef<"Zona", 'String'>
    readonly precio: FieldRef<"Zona", 'Float'>
    readonly color: FieldRef<"Zona", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Zona findUnique
   */
  export type ZonaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zona
     */
    select?: ZonaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZonaInclude<ExtArgs> | null
    /**
     * Filter, which Zona to fetch.
     */
    where: ZonaWhereUniqueInput
  }

  /**
   * Zona findUniqueOrThrow
   */
  export type ZonaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zona
     */
    select?: ZonaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZonaInclude<ExtArgs> | null
    /**
     * Filter, which Zona to fetch.
     */
    where: ZonaWhereUniqueInput
  }

  /**
   * Zona findFirst
   */
  export type ZonaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zona
     */
    select?: ZonaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZonaInclude<ExtArgs> | null
    /**
     * Filter, which Zona to fetch.
     */
    where?: ZonaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Zonas to fetch.
     */
    orderBy?: ZonaOrderByWithRelationInput | ZonaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Zonas.
     */
    cursor?: ZonaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Zonas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Zonas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Zonas.
     */
    distinct?: ZonaScalarFieldEnum | ZonaScalarFieldEnum[]
  }

  /**
   * Zona findFirstOrThrow
   */
  export type ZonaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zona
     */
    select?: ZonaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZonaInclude<ExtArgs> | null
    /**
     * Filter, which Zona to fetch.
     */
    where?: ZonaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Zonas to fetch.
     */
    orderBy?: ZonaOrderByWithRelationInput | ZonaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Zonas.
     */
    cursor?: ZonaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Zonas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Zonas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Zonas.
     */
    distinct?: ZonaScalarFieldEnum | ZonaScalarFieldEnum[]
  }

  /**
   * Zona findMany
   */
  export type ZonaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zona
     */
    select?: ZonaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZonaInclude<ExtArgs> | null
    /**
     * Filter, which Zonas to fetch.
     */
    where?: ZonaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Zonas to fetch.
     */
    orderBy?: ZonaOrderByWithRelationInput | ZonaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Zonas.
     */
    cursor?: ZonaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Zonas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Zonas.
     */
    skip?: number
    distinct?: ZonaScalarFieldEnum | ZonaScalarFieldEnum[]
  }

  /**
   * Zona create
   */
  export type ZonaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zona
     */
    select?: ZonaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZonaInclude<ExtArgs> | null
    /**
     * The data needed to create a Zona.
     */
    data: XOR<ZonaCreateInput, ZonaUncheckedCreateInput>
  }

  /**
   * Zona createMany
   */
  export type ZonaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Zonas.
     */
    data: ZonaCreateManyInput | ZonaCreateManyInput[]
  }

  /**
   * Zona createManyAndReturn
   */
  export type ZonaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zona
     */
    select?: ZonaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Zonas.
     */
    data: ZonaCreateManyInput | ZonaCreateManyInput[]
  }

  /**
   * Zona update
   */
  export type ZonaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zona
     */
    select?: ZonaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZonaInclude<ExtArgs> | null
    /**
     * The data needed to update a Zona.
     */
    data: XOR<ZonaUpdateInput, ZonaUncheckedUpdateInput>
    /**
     * Choose, which Zona to update.
     */
    where: ZonaWhereUniqueInput
  }

  /**
   * Zona updateMany
   */
  export type ZonaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Zonas.
     */
    data: XOR<ZonaUpdateManyMutationInput, ZonaUncheckedUpdateManyInput>
    /**
     * Filter which Zonas to update
     */
    where?: ZonaWhereInput
  }

  /**
   * Zona upsert
   */
  export type ZonaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zona
     */
    select?: ZonaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZonaInclude<ExtArgs> | null
    /**
     * The filter to search for the Zona to update in case it exists.
     */
    where: ZonaWhereUniqueInput
    /**
     * In case the Zona found by the `where` argument doesn't exist, create a new Zona with this data.
     */
    create: XOR<ZonaCreateInput, ZonaUncheckedCreateInput>
    /**
     * In case the Zona was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ZonaUpdateInput, ZonaUncheckedUpdateInput>
  }

  /**
   * Zona delete
   */
  export type ZonaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zona
     */
    select?: ZonaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZonaInclude<ExtArgs> | null
    /**
     * Filter which Zona to delete.
     */
    where: ZonaWhereUniqueInput
  }

  /**
   * Zona deleteMany
   */
  export type ZonaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Zonas to delete
     */
    where?: ZonaWhereInput
  }

  /**
   * Zona.butacas
   */
  export type Zona$butacasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Butaca
     */
    select?: ButacaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ButacaInclude<ExtArgs> | null
    where?: ButacaWhereInput
    orderBy?: ButacaOrderByWithRelationInput | ButacaOrderByWithRelationInput[]
    cursor?: ButacaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ButacaScalarFieldEnum | ButacaScalarFieldEnum[]
  }

  /**
   * Zona without action
   */
  export type ZonaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zona
     */
    select?: ZonaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZonaInclude<ExtArgs> | null
  }


  /**
   * Model Venta
   */

  export type AggregateVenta = {
    _count: VentaCountAggregateOutputType | null
    _min: VentaMinAggregateOutputType | null
    _max: VentaMaxAggregateOutputType | null
  }

  export type VentaMinAggregateOutputType = {
    id: string | null
    compradorNombre: string | null
    compradorEmail: string | null
    fechaVenta: Date | null
  }

  export type VentaMaxAggregateOutputType = {
    id: string | null
    compradorNombre: string | null
    compradorEmail: string | null
    fechaVenta: Date | null
  }

  export type VentaCountAggregateOutputType = {
    id: number
    compradorNombre: number
    compradorEmail: number
    fechaVenta: number
    _all: number
  }


  export type VentaMinAggregateInputType = {
    id?: true
    compradorNombre?: true
    compradorEmail?: true
    fechaVenta?: true
  }

  export type VentaMaxAggregateInputType = {
    id?: true
    compradorNombre?: true
    compradorEmail?: true
    fechaVenta?: true
  }

  export type VentaCountAggregateInputType = {
    id?: true
    compradorNombre?: true
    compradorEmail?: true
    fechaVenta?: true
    _all?: true
  }

  export type VentaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Venta to aggregate.
     */
    where?: VentaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ventas to fetch.
     */
    orderBy?: VentaOrderByWithRelationInput | VentaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VentaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ventas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ventas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ventas
    **/
    _count?: true | VentaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VentaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VentaMaxAggregateInputType
  }

  export type GetVentaAggregateType<T extends VentaAggregateArgs> = {
        [P in keyof T & keyof AggregateVenta]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVenta[P]>
      : GetScalarType<T[P], AggregateVenta[P]>
  }




  export type VentaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VentaWhereInput
    orderBy?: VentaOrderByWithAggregationInput | VentaOrderByWithAggregationInput[]
    by: VentaScalarFieldEnum[] | VentaScalarFieldEnum
    having?: VentaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VentaCountAggregateInputType | true
    _min?: VentaMinAggregateInputType
    _max?: VentaMaxAggregateInputType
  }

  export type VentaGroupByOutputType = {
    id: string
    compradorNombre: string
    compradorEmail: string
    fechaVenta: Date
    _count: VentaCountAggregateOutputType | null
    _min: VentaMinAggregateOutputType | null
    _max: VentaMaxAggregateOutputType | null
  }

  type GetVentaGroupByPayload<T extends VentaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VentaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VentaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VentaGroupByOutputType[P]>
            : GetScalarType<T[P], VentaGroupByOutputType[P]>
        }
      >
    >


  export type VentaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    compradorNombre?: boolean
    compradorEmail?: boolean
    fechaVenta?: boolean
    butacas?: boolean | Venta$butacasArgs<ExtArgs>
    _count?: boolean | VentaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["venta"]>

  export type VentaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    compradorNombre?: boolean
    compradorEmail?: boolean
    fechaVenta?: boolean
  }, ExtArgs["result"]["venta"]>

  export type VentaSelectScalar = {
    id?: boolean
    compradorNombre?: boolean
    compradorEmail?: boolean
    fechaVenta?: boolean
  }

  export type VentaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    butacas?: boolean | Venta$butacasArgs<ExtArgs>
    _count?: boolean | VentaCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type VentaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $VentaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Venta"
    objects: {
      butacas: Prisma.$ButacaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      compradorNombre: string
      compradorEmail: string
      fechaVenta: Date
    }, ExtArgs["result"]["venta"]>
    composites: {}
  }

  type VentaGetPayload<S extends boolean | null | undefined | VentaDefaultArgs> = $Result.GetResult<Prisma.$VentaPayload, S>

  type VentaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VentaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VentaCountAggregateInputType | true
    }

  export interface VentaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Venta'], meta: { name: 'Venta' } }
    /**
     * Find zero or one Venta that matches the filter.
     * @param {VentaFindUniqueArgs} args - Arguments to find a Venta
     * @example
     * // Get one Venta
     * const venta = await prisma.venta.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VentaFindUniqueArgs>(args: SelectSubset<T, VentaFindUniqueArgs<ExtArgs>>): Prisma__VentaClient<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Venta that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VentaFindUniqueOrThrowArgs} args - Arguments to find a Venta
     * @example
     * // Get one Venta
     * const venta = await prisma.venta.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VentaFindUniqueOrThrowArgs>(args: SelectSubset<T, VentaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VentaClient<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Venta that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VentaFindFirstArgs} args - Arguments to find a Venta
     * @example
     * // Get one Venta
     * const venta = await prisma.venta.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VentaFindFirstArgs>(args?: SelectSubset<T, VentaFindFirstArgs<ExtArgs>>): Prisma__VentaClient<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Venta that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VentaFindFirstOrThrowArgs} args - Arguments to find a Venta
     * @example
     * // Get one Venta
     * const venta = await prisma.venta.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VentaFindFirstOrThrowArgs>(args?: SelectSubset<T, VentaFindFirstOrThrowArgs<ExtArgs>>): Prisma__VentaClient<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Ventas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VentaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ventas
     * const ventas = await prisma.venta.findMany()
     * 
     * // Get first 10 Ventas
     * const ventas = await prisma.venta.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ventaWithIdOnly = await prisma.venta.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VentaFindManyArgs>(args?: SelectSubset<T, VentaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Venta.
     * @param {VentaCreateArgs} args - Arguments to create a Venta.
     * @example
     * // Create one Venta
     * const Venta = await prisma.venta.create({
     *   data: {
     *     // ... data to create a Venta
     *   }
     * })
     * 
     */
    create<T extends VentaCreateArgs>(args: SelectSubset<T, VentaCreateArgs<ExtArgs>>): Prisma__VentaClient<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Ventas.
     * @param {VentaCreateManyArgs} args - Arguments to create many Ventas.
     * @example
     * // Create many Ventas
     * const venta = await prisma.venta.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VentaCreateManyArgs>(args?: SelectSubset<T, VentaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Ventas and returns the data saved in the database.
     * @param {VentaCreateManyAndReturnArgs} args - Arguments to create many Ventas.
     * @example
     * // Create many Ventas
     * const venta = await prisma.venta.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Ventas and only return the `id`
     * const ventaWithIdOnly = await prisma.venta.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VentaCreateManyAndReturnArgs>(args?: SelectSubset<T, VentaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Venta.
     * @param {VentaDeleteArgs} args - Arguments to delete one Venta.
     * @example
     * // Delete one Venta
     * const Venta = await prisma.venta.delete({
     *   where: {
     *     // ... filter to delete one Venta
     *   }
     * })
     * 
     */
    delete<T extends VentaDeleteArgs>(args: SelectSubset<T, VentaDeleteArgs<ExtArgs>>): Prisma__VentaClient<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Venta.
     * @param {VentaUpdateArgs} args - Arguments to update one Venta.
     * @example
     * // Update one Venta
     * const venta = await prisma.venta.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VentaUpdateArgs>(args: SelectSubset<T, VentaUpdateArgs<ExtArgs>>): Prisma__VentaClient<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Ventas.
     * @param {VentaDeleteManyArgs} args - Arguments to filter Ventas to delete.
     * @example
     * // Delete a few Ventas
     * const { count } = await prisma.venta.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VentaDeleteManyArgs>(args?: SelectSubset<T, VentaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ventas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VentaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ventas
     * const venta = await prisma.venta.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VentaUpdateManyArgs>(args: SelectSubset<T, VentaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Venta.
     * @param {VentaUpsertArgs} args - Arguments to update or create a Venta.
     * @example
     * // Update or create a Venta
     * const venta = await prisma.venta.upsert({
     *   create: {
     *     // ... data to create a Venta
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Venta we want to update
     *   }
     * })
     */
    upsert<T extends VentaUpsertArgs>(args: SelectSubset<T, VentaUpsertArgs<ExtArgs>>): Prisma__VentaClient<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Ventas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VentaCountArgs} args - Arguments to filter Ventas to count.
     * @example
     * // Count the number of Ventas
     * const count = await prisma.venta.count({
     *   where: {
     *     // ... the filter for the Ventas we want to count
     *   }
     * })
    **/
    count<T extends VentaCountArgs>(
      args?: Subset<T, VentaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VentaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Venta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VentaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VentaAggregateArgs>(args: Subset<T, VentaAggregateArgs>): Prisma.PrismaPromise<GetVentaAggregateType<T>>

    /**
     * Group by Venta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VentaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VentaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VentaGroupByArgs['orderBy'] }
        : { orderBy?: VentaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VentaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVentaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Venta model
   */
  readonly fields: VentaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Venta.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VentaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    butacas<T extends Venta$butacasArgs<ExtArgs> = {}>(args?: Subset<T, Venta$butacasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ButacaPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Venta model
   */ 
  interface VentaFieldRefs {
    readonly id: FieldRef<"Venta", 'String'>
    readonly compradorNombre: FieldRef<"Venta", 'String'>
    readonly compradorEmail: FieldRef<"Venta", 'String'>
    readonly fechaVenta: FieldRef<"Venta", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Venta findUnique
   */
  export type VentaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VentaInclude<ExtArgs> | null
    /**
     * Filter, which Venta to fetch.
     */
    where: VentaWhereUniqueInput
  }

  /**
   * Venta findUniqueOrThrow
   */
  export type VentaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VentaInclude<ExtArgs> | null
    /**
     * Filter, which Venta to fetch.
     */
    where: VentaWhereUniqueInput
  }

  /**
   * Venta findFirst
   */
  export type VentaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VentaInclude<ExtArgs> | null
    /**
     * Filter, which Venta to fetch.
     */
    where?: VentaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ventas to fetch.
     */
    orderBy?: VentaOrderByWithRelationInput | VentaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ventas.
     */
    cursor?: VentaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ventas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ventas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ventas.
     */
    distinct?: VentaScalarFieldEnum | VentaScalarFieldEnum[]
  }

  /**
   * Venta findFirstOrThrow
   */
  export type VentaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VentaInclude<ExtArgs> | null
    /**
     * Filter, which Venta to fetch.
     */
    where?: VentaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ventas to fetch.
     */
    orderBy?: VentaOrderByWithRelationInput | VentaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ventas.
     */
    cursor?: VentaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ventas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ventas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ventas.
     */
    distinct?: VentaScalarFieldEnum | VentaScalarFieldEnum[]
  }

  /**
   * Venta findMany
   */
  export type VentaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VentaInclude<ExtArgs> | null
    /**
     * Filter, which Ventas to fetch.
     */
    where?: VentaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ventas to fetch.
     */
    orderBy?: VentaOrderByWithRelationInput | VentaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ventas.
     */
    cursor?: VentaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ventas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ventas.
     */
    skip?: number
    distinct?: VentaScalarFieldEnum | VentaScalarFieldEnum[]
  }

  /**
   * Venta create
   */
  export type VentaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VentaInclude<ExtArgs> | null
    /**
     * The data needed to create a Venta.
     */
    data: XOR<VentaCreateInput, VentaUncheckedCreateInput>
  }

  /**
   * Venta createMany
   */
  export type VentaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ventas.
     */
    data: VentaCreateManyInput | VentaCreateManyInput[]
  }

  /**
   * Venta createManyAndReturn
   */
  export type VentaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Ventas.
     */
    data: VentaCreateManyInput | VentaCreateManyInput[]
  }

  /**
   * Venta update
   */
  export type VentaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VentaInclude<ExtArgs> | null
    /**
     * The data needed to update a Venta.
     */
    data: XOR<VentaUpdateInput, VentaUncheckedUpdateInput>
    /**
     * Choose, which Venta to update.
     */
    where: VentaWhereUniqueInput
  }

  /**
   * Venta updateMany
   */
  export type VentaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ventas.
     */
    data: XOR<VentaUpdateManyMutationInput, VentaUncheckedUpdateManyInput>
    /**
     * Filter which Ventas to update
     */
    where?: VentaWhereInput
  }

  /**
   * Venta upsert
   */
  export type VentaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VentaInclude<ExtArgs> | null
    /**
     * The filter to search for the Venta to update in case it exists.
     */
    where: VentaWhereUniqueInput
    /**
     * In case the Venta found by the `where` argument doesn't exist, create a new Venta with this data.
     */
    create: XOR<VentaCreateInput, VentaUncheckedCreateInput>
    /**
     * In case the Venta was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VentaUpdateInput, VentaUncheckedUpdateInput>
  }

  /**
   * Venta delete
   */
  export type VentaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VentaInclude<ExtArgs> | null
    /**
     * Filter which Venta to delete.
     */
    where: VentaWhereUniqueInput
  }

  /**
   * Venta deleteMany
   */
  export type VentaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ventas to delete
     */
    where?: VentaWhereInput
  }

  /**
   * Venta.butacas
   */
  export type Venta$butacasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Butaca
     */
    select?: ButacaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ButacaInclude<ExtArgs> | null
    where?: ButacaWhereInput
    orderBy?: ButacaOrderByWithRelationInput | ButacaOrderByWithRelationInput[]
    cursor?: ButacaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ButacaScalarFieldEnum | ButacaScalarFieldEnum[]
  }

  /**
   * Venta without action
   */
  export type VentaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VentaInclude<ExtArgs> | null
  }


  /**
   * Model Butaca
   */

  export type AggregateButaca = {
    _count: ButacaCountAggregateOutputType | null
    _avg: ButacaAvgAggregateOutputType | null
    _sum: ButacaSumAggregateOutputType | null
    _min: ButacaMinAggregateOutputType | null
    _max: ButacaMaxAggregateOutputType | null
  }

  export type ButacaAvgAggregateOutputType = {
    id: number | null
    columna: number | null
    zonaId: number | null
  }

  export type ButacaSumAggregateOutputType = {
    id: number | null
    columna: number | null
    zonaId: number | null
  }

  export type ButacaMinAggregateOutputType = {
    id: number | null
    fila: string | null
    columna: number | null
    zonaId: number | null
    disponible: boolean | null
    estadoReserva: string | null
    reservaHasta: Date | null
    reservaId: string | null
    compradorTemp: string | null
    ventaId: string | null
  }

  export type ButacaMaxAggregateOutputType = {
    id: number | null
    fila: string | null
    columna: number | null
    zonaId: number | null
    disponible: boolean | null
    estadoReserva: string | null
    reservaHasta: Date | null
    reservaId: string | null
    compradorTemp: string | null
    ventaId: string | null
  }

  export type ButacaCountAggregateOutputType = {
    id: number
    fila: number
    columna: number
    zonaId: number
    disponible: number
    estadoReserva: number
    reservaHasta: number
    reservaId: number
    compradorTemp: number
    ventaId: number
    _all: number
  }


  export type ButacaAvgAggregateInputType = {
    id?: true
    columna?: true
    zonaId?: true
  }

  export type ButacaSumAggregateInputType = {
    id?: true
    columna?: true
    zonaId?: true
  }

  export type ButacaMinAggregateInputType = {
    id?: true
    fila?: true
    columna?: true
    zonaId?: true
    disponible?: true
    estadoReserva?: true
    reservaHasta?: true
    reservaId?: true
    compradorTemp?: true
    ventaId?: true
  }

  export type ButacaMaxAggregateInputType = {
    id?: true
    fila?: true
    columna?: true
    zonaId?: true
    disponible?: true
    estadoReserva?: true
    reservaHasta?: true
    reservaId?: true
    compradorTemp?: true
    ventaId?: true
  }

  export type ButacaCountAggregateInputType = {
    id?: true
    fila?: true
    columna?: true
    zonaId?: true
    disponible?: true
    estadoReserva?: true
    reservaHasta?: true
    reservaId?: true
    compradorTemp?: true
    ventaId?: true
    _all?: true
  }

  export type ButacaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Butaca to aggregate.
     */
    where?: ButacaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Butacas to fetch.
     */
    orderBy?: ButacaOrderByWithRelationInput | ButacaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ButacaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Butacas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Butacas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Butacas
    **/
    _count?: true | ButacaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ButacaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ButacaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ButacaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ButacaMaxAggregateInputType
  }

  export type GetButacaAggregateType<T extends ButacaAggregateArgs> = {
        [P in keyof T & keyof AggregateButaca]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateButaca[P]>
      : GetScalarType<T[P], AggregateButaca[P]>
  }




  export type ButacaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ButacaWhereInput
    orderBy?: ButacaOrderByWithAggregationInput | ButacaOrderByWithAggregationInput[]
    by: ButacaScalarFieldEnum[] | ButacaScalarFieldEnum
    having?: ButacaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ButacaCountAggregateInputType | true
    _avg?: ButacaAvgAggregateInputType
    _sum?: ButacaSumAggregateInputType
    _min?: ButacaMinAggregateInputType
    _max?: ButacaMaxAggregateInputType
  }

  export type ButacaGroupByOutputType = {
    id: number
    fila: string
    columna: number
    zonaId: number
    disponible: boolean
    estadoReserva: string | null
    reservaHasta: Date | null
    reservaId: string | null
    compradorTemp: string | null
    ventaId: string | null
    _count: ButacaCountAggregateOutputType | null
    _avg: ButacaAvgAggregateOutputType | null
    _sum: ButacaSumAggregateOutputType | null
    _min: ButacaMinAggregateOutputType | null
    _max: ButacaMaxAggregateOutputType | null
  }

  type GetButacaGroupByPayload<T extends ButacaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ButacaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ButacaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ButacaGroupByOutputType[P]>
            : GetScalarType<T[P], ButacaGroupByOutputType[P]>
        }
      >
    >


  export type ButacaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fila?: boolean
    columna?: boolean
    zonaId?: boolean
    disponible?: boolean
    estadoReserva?: boolean
    reservaHasta?: boolean
    reservaId?: boolean
    compradorTemp?: boolean
    ventaId?: boolean
    zona?: boolean | ZonaDefaultArgs<ExtArgs>
    venta?: boolean | Butaca$ventaArgs<ExtArgs>
  }, ExtArgs["result"]["butaca"]>

  export type ButacaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fila?: boolean
    columna?: boolean
    zonaId?: boolean
    disponible?: boolean
    estadoReserva?: boolean
    reservaHasta?: boolean
    reservaId?: boolean
    compradorTemp?: boolean
    ventaId?: boolean
    zona?: boolean | ZonaDefaultArgs<ExtArgs>
    venta?: boolean | Butaca$ventaArgs<ExtArgs>
  }, ExtArgs["result"]["butaca"]>

  export type ButacaSelectScalar = {
    id?: boolean
    fila?: boolean
    columna?: boolean
    zonaId?: boolean
    disponible?: boolean
    estadoReserva?: boolean
    reservaHasta?: boolean
    reservaId?: boolean
    compradorTemp?: boolean
    ventaId?: boolean
  }

  export type ButacaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    zona?: boolean | ZonaDefaultArgs<ExtArgs>
    venta?: boolean | Butaca$ventaArgs<ExtArgs>
  }
  export type ButacaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    zona?: boolean | ZonaDefaultArgs<ExtArgs>
    venta?: boolean | Butaca$ventaArgs<ExtArgs>
  }

  export type $ButacaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Butaca"
    objects: {
      zona: Prisma.$ZonaPayload<ExtArgs>
      venta: Prisma.$VentaPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      fila: string
      columna: number
      zonaId: number
      disponible: boolean
      estadoReserva: string | null
      reservaHasta: Date | null
      reservaId: string | null
      compradorTemp: string | null
      ventaId: string | null
    }, ExtArgs["result"]["butaca"]>
    composites: {}
  }

  type ButacaGetPayload<S extends boolean | null | undefined | ButacaDefaultArgs> = $Result.GetResult<Prisma.$ButacaPayload, S>

  type ButacaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ButacaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ButacaCountAggregateInputType | true
    }

  export interface ButacaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Butaca'], meta: { name: 'Butaca' } }
    /**
     * Find zero or one Butaca that matches the filter.
     * @param {ButacaFindUniqueArgs} args - Arguments to find a Butaca
     * @example
     * // Get one Butaca
     * const butaca = await prisma.butaca.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ButacaFindUniqueArgs>(args: SelectSubset<T, ButacaFindUniqueArgs<ExtArgs>>): Prisma__ButacaClient<$Result.GetResult<Prisma.$ButacaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Butaca that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ButacaFindUniqueOrThrowArgs} args - Arguments to find a Butaca
     * @example
     * // Get one Butaca
     * const butaca = await prisma.butaca.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ButacaFindUniqueOrThrowArgs>(args: SelectSubset<T, ButacaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ButacaClient<$Result.GetResult<Prisma.$ButacaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Butaca that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ButacaFindFirstArgs} args - Arguments to find a Butaca
     * @example
     * // Get one Butaca
     * const butaca = await prisma.butaca.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ButacaFindFirstArgs>(args?: SelectSubset<T, ButacaFindFirstArgs<ExtArgs>>): Prisma__ButacaClient<$Result.GetResult<Prisma.$ButacaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Butaca that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ButacaFindFirstOrThrowArgs} args - Arguments to find a Butaca
     * @example
     * // Get one Butaca
     * const butaca = await prisma.butaca.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ButacaFindFirstOrThrowArgs>(args?: SelectSubset<T, ButacaFindFirstOrThrowArgs<ExtArgs>>): Prisma__ButacaClient<$Result.GetResult<Prisma.$ButacaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Butacas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ButacaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Butacas
     * const butacas = await prisma.butaca.findMany()
     * 
     * // Get first 10 Butacas
     * const butacas = await prisma.butaca.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const butacaWithIdOnly = await prisma.butaca.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ButacaFindManyArgs>(args?: SelectSubset<T, ButacaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ButacaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Butaca.
     * @param {ButacaCreateArgs} args - Arguments to create a Butaca.
     * @example
     * // Create one Butaca
     * const Butaca = await prisma.butaca.create({
     *   data: {
     *     // ... data to create a Butaca
     *   }
     * })
     * 
     */
    create<T extends ButacaCreateArgs>(args: SelectSubset<T, ButacaCreateArgs<ExtArgs>>): Prisma__ButacaClient<$Result.GetResult<Prisma.$ButacaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Butacas.
     * @param {ButacaCreateManyArgs} args - Arguments to create many Butacas.
     * @example
     * // Create many Butacas
     * const butaca = await prisma.butaca.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ButacaCreateManyArgs>(args?: SelectSubset<T, ButacaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Butacas and returns the data saved in the database.
     * @param {ButacaCreateManyAndReturnArgs} args - Arguments to create many Butacas.
     * @example
     * // Create many Butacas
     * const butaca = await prisma.butaca.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Butacas and only return the `id`
     * const butacaWithIdOnly = await prisma.butaca.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ButacaCreateManyAndReturnArgs>(args?: SelectSubset<T, ButacaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ButacaPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Butaca.
     * @param {ButacaDeleteArgs} args - Arguments to delete one Butaca.
     * @example
     * // Delete one Butaca
     * const Butaca = await prisma.butaca.delete({
     *   where: {
     *     // ... filter to delete one Butaca
     *   }
     * })
     * 
     */
    delete<T extends ButacaDeleteArgs>(args: SelectSubset<T, ButacaDeleteArgs<ExtArgs>>): Prisma__ButacaClient<$Result.GetResult<Prisma.$ButacaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Butaca.
     * @param {ButacaUpdateArgs} args - Arguments to update one Butaca.
     * @example
     * // Update one Butaca
     * const butaca = await prisma.butaca.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ButacaUpdateArgs>(args: SelectSubset<T, ButacaUpdateArgs<ExtArgs>>): Prisma__ButacaClient<$Result.GetResult<Prisma.$ButacaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Butacas.
     * @param {ButacaDeleteManyArgs} args - Arguments to filter Butacas to delete.
     * @example
     * // Delete a few Butacas
     * const { count } = await prisma.butaca.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ButacaDeleteManyArgs>(args?: SelectSubset<T, ButacaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Butacas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ButacaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Butacas
     * const butaca = await prisma.butaca.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ButacaUpdateManyArgs>(args: SelectSubset<T, ButacaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Butaca.
     * @param {ButacaUpsertArgs} args - Arguments to update or create a Butaca.
     * @example
     * // Update or create a Butaca
     * const butaca = await prisma.butaca.upsert({
     *   create: {
     *     // ... data to create a Butaca
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Butaca we want to update
     *   }
     * })
     */
    upsert<T extends ButacaUpsertArgs>(args: SelectSubset<T, ButacaUpsertArgs<ExtArgs>>): Prisma__ButacaClient<$Result.GetResult<Prisma.$ButacaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Butacas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ButacaCountArgs} args - Arguments to filter Butacas to count.
     * @example
     * // Count the number of Butacas
     * const count = await prisma.butaca.count({
     *   where: {
     *     // ... the filter for the Butacas we want to count
     *   }
     * })
    **/
    count<T extends ButacaCountArgs>(
      args?: Subset<T, ButacaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ButacaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Butaca.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ButacaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ButacaAggregateArgs>(args: Subset<T, ButacaAggregateArgs>): Prisma.PrismaPromise<GetButacaAggregateType<T>>

    /**
     * Group by Butaca.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ButacaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ButacaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ButacaGroupByArgs['orderBy'] }
        : { orderBy?: ButacaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ButacaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetButacaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Butaca model
   */
  readonly fields: ButacaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Butaca.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ButacaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    zona<T extends ZonaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ZonaDefaultArgs<ExtArgs>>): Prisma__ZonaClient<$Result.GetResult<Prisma.$ZonaPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    venta<T extends Butaca$ventaArgs<ExtArgs> = {}>(args?: Subset<T, Butaca$ventaArgs<ExtArgs>>): Prisma__VentaClient<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Butaca model
   */ 
  interface ButacaFieldRefs {
    readonly id: FieldRef<"Butaca", 'Int'>
    readonly fila: FieldRef<"Butaca", 'String'>
    readonly columna: FieldRef<"Butaca", 'Int'>
    readonly zonaId: FieldRef<"Butaca", 'Int'>
    readonly disponible: FieldRef<"Butaca", 'Boolean'>
    readonly estadoReserva: FieldRef<"Butaca", 'String'>
    readonly reservaHasta: FieldRef<"Butaca", 'DateTime'>
    readonly reservaId: FieldRef<"Butaca", 'String'>
    readonly compradorTemp: FieldRef<"Butaca", 'String'>
    readonly ventaId: FieldRef<"Butaca", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Butaca findUnique
   */
  export type ButacaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Butaca
     */
    select?: ButacaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ButacaInclude<ExtArgs> | null
    /**
     * Filter, which Butaca to fetch.
     */
    where: ButacaWhereUniqueInput
  }

  /**
   * Butaca findUniqueOrThrow
   */
  export type ButacaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Butaca
     */
    select?: ButacaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ButacaInclude<ExtArgs> | null
    /**
     * Filter, which Butaca to fetch.
     */
    where: ButacaWhereUniqueInput
  }

  /**
   * Butaca findFirst
   */
  export type ButacaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Butaca
     */
    select?: ButacaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ButacaInclude<ExtArgs> | null
    /**
     * Filter, which Butaca to fetch.
     */
    where?: ButacaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Butacas to fetch.
     */
    orderBy?: ButacaOrderByWithRelationInput | ButacaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Butacas.
     */
    cursor?: ButacaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Butacas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Butacas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Butacas.
     */
    distinct?: ButacaScalarFieldEnum | ButacaScalarFieldEnum[]
  }

  /**
   * Butaca findFirstOrThrow
   */
  export type ButacaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Butaca
     */
    select?: ButacaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ButacaInclude<ExtArgs> | null
    /**
     * Filter, which Butaca to fetch.
     */
    where?: ButacaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Butacas to fetch.
     */
    orderBy?: ButacaOrderByWithRelationInput | ButacaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Butacas.
     */
    cursor?: ButacaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Butacas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Butacas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Butacas.
     */
    distinct?: ButacaScalarFieldEnum | ButacaScalarFieldEnum[]
  }

  /**
   * Butaca findMany
   */
  export type ButacaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Butaca
     */
    select?: ButacaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ButacaInclude<ExtArgs> | null
    /**
     * Filter, which Butacas to fetch.
     */
    where?: ButacaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Butacas to fetch.
     */
    orderBy?: ButacaOrderByWithRelationInput | ButacaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Butacas.
     */
    cursor?: ButacaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Butacas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Butacas.
     */
    skip?: number
    distinct?: ButacaScalarFieldEnum | ButacaScalarFieldEnum[]
  }

  /**
   * Butaca create
   */
  export type ButacaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Butaca
     */
    select?: ButacaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ButacaInclude<ExtArgs> | null
    /**
     * The data needed to create a Butaca.
     */
    data: XOR<ButacaCreateInput, ButacaUncheckedCreateInput>
  }

  /**
   * Butaca createMany
   */
  export type ButacaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Butacas.
     */
    data: ButacaCreateManyInput | ButacaCreateManyInput[]
  }

  /**
   * Butaca createManyAndReturn
   */
  export type ButacaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Butaca
     */
    select?: ButacaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Butacas.
     */
    data: ButacaCreateManyInput | ButacaCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ButacaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Butaca update
   */
  export type ButacaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Butaca
     */
    select?: ButacaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ButacaInclude<ExtArgs> | null
    /**
     * The data needed to update a Butaca.
     */
    data: XOR<ButacaUpdateInput, ButacaUncheckedUpdateInput>
    /**
     * Choose, which Butaca to update.
     */
    where: ButacaWhereUniqueInput
  }

  /**
   * Butaca updateMany
   */
  export type ButacaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Butacas.
     */
    data: XOR<ButacaUpdateManyMutationInput, ButacaUncheckedUpdateManyInput>
    /**
     * Filter which Butacas to update
     */
    where?: ButacaWhereInput
  }

  /**
   * Butaca upsert
   */
  export type ButacaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Butaca
     */
    select?: ButacaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ButacaInclude<ExtArgs> | null
    /**
     * The filter to search for the Butaca to update in case it exists.
     */
    where: ButacaWhereUniqueInput
    /**
     * In case the Butaca found by the `where` argument doesn't exist, create a new Butaca with this data.
     */
    create: XOR<ButacaCreateInput, ButacaUncheckedCreateInput>
    /**
     * In case the Butaca was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ButacaUpdateInput, ButacaUncheckedUpdateInput>
  }

  /**
   * Butaca delete
   */
  export type ButacaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Butaca
     */
    select?: ButacaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ButacaInclude<ExtArgs> | null
    /**
     * Filter which Butaca to delete.
     */
    where: ButacaWhereUniqueInput
  }

  /**
   * Butaca deleteMany
   */
  export type ButacaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Butacas to delete
     */
    where?: ButacaWhereInput
  }

  /**
   * Butaca.venta
   */
  export type Butaca$ventaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VentaInclude<ExtArgs> | null
    where?: VentaWhereInput
  }

  /**
   * Butaca without action
   */
  export type ButacaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Butaca
     */
    select?: ButacaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ButacaInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ZonaScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    precio: 'precio',
    color: 'color'
  };

  export type ZonaScalarFieldEnum = (typeof ZonaScalarFieldEnum)[keyof typeof ZonaScalarFieldEnum]


  export const VentaScalarFieldEnum: {
    id: 'id',
    compradorNombre: 'compradorNombre',
    compradorEmail: 'compradorEmail',
    fechaVenta: 'fechaVenta'
  };

  export type VentaScalarFieldEnum = (typeof VentaScalarFieldEnum)[keyof typeof VentaScalarFieldEnum]


  export const ButacaScalarFieldEnum: {
    id: 'id',
    fila: 'fila',
    columna: 'columna',
    zonaId: 'zonaId',
    disponible: 'disponible',
    estadoReserva: 'estadoReserva',
    reservaHasta: 'reservaHasta',
    reservaId: 'reservaId',
    compradorTemp: 'compradorTemp',
    ventaId: 'ventaId'
  };

  export type ButacaScalarFieldEnum = (typeof ButacaScalarFieldEnum)[keyof typeof ButacaScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    
  /**
   * Deep Input Types
   */


  export type ZonaWhereInput = {
    AND?: ZonaWhereInput | ZonaWhereInput[]
    OR?: ZonaWhereInput[]
    NOT?: ZonaWhereInput | ZonaWhereInput[]
    id?: IntFilter<"Zona"> | number
    nombre?: StringFilter<"Zona"> | string
    precio?: FloatFilter<"Zona"> | number
    color?: StringFilter<"Zona"> | string
    butacas?: ButacaListRelationFilter
  }

  export type ZonaOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    precio?: SortOrder
    color?: SortOrder
    butacas?: ButacaOrderByRelationAggregateInput
  }

  export type ZonaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nombre?: string
    AND?: ZonaWhereInput | ZonaWhereInput[]
    OR?: ZonaWhereInput[]
    NOT?: ZonaWhereInput | ZonaWhereInput[]
    precio?: FloatFilter<"Zona"> | number
    color?: StringFilter<"Zona"> | string
    butacas?: ButacaListRelationFilter
  }, "id" | "nombre">

  export type ZonaOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    precio?: SortOrder
    color?: SortOrder
    _count?: ZonaCountOrderByAggregateInput
    _avg?: ZonaAvgOrderByAggregateInput
    _max?: ZonaMaxOrderByAggregateInput
    _min?: ZonaMinOrderByAggregateInput
    _sum?: ZonaSumOrderByAggregateInput
  }

  export type ZonaScalarWhereWithAggregatesInput = {
    AND?: ZonaScalarWhereWithAggregatesInput | ZonaScalarWhereWithAggregatesInput[]
    OR?: ZonaScalarWhereWithAggregatesInput[]
    NOT?: ZonaScalarWhereWithAggregatesInput | ZonaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Zona"> | number
    nombre?: StringWithAggregatesFilter<"Zona"> | string
    precio?: FloatWithAggregatesFilter<"Zona"> | number
    color?: StringWithAggregatesFilter<"Zona"> | string
  }

  export type VentaWhereInput = {
    AND?: VentaWhereInput | VentaWhereInput[]
    OR?: VentaWhereInput[]
    NOT?: VentaWhereInput | VentaWhereInput[]
    id?: StringFilter<"Venta"> | string
    compradorNombre?: StringFilter<"Venta"> | string
    compradorEmail?: StringFilter<"Venta"> | string
    fechaVenta?: DateTimeFilter<"Venta"> | Date | string
    butacas?: ButacaListRelationFilter
  }

  export type VentaOrderByWithRelationInput = {
    id?: SortOrder
    compradorNombre?: SortOrder
    compradorEmail?: SortOrder
    fechaVenta?: SortOrder
    butacas?: ButacaOrderByRelationAggregateInput
  }

  export type VentaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: VentaWhereInput | VentaWhereInput[]
    OR?: VentaWhereInput[]
    NOT?: VentaWhereInput | VentaWhereInput[]
    compradorNombre?: StringFilter<"Venta"> | string
    compradorEmail?: StringFilter<"Venta"> | string
    fechaVenta?: DateTimeFilter<"Venta"> | Date | string
    butacas?: ButacaListRelationFilter
  }, "id">

  export type VentaOrderByWithAggregationInput = {
    id?: SortOrder
    compradorNombre?: SortOrder
    compradorEmail?: SortOrder
    fechaVenta?: SortOrder
    _count?: VentaCountOrderByAggregateInput
    _max?: VentaMaxOrderByAggregateInput
    _min?: VentaMinOrderByAggregateInput
  }

  export type VentaScalarWhereWithAggregatesInput = {
    AND?: VentaScalarWhereWithAggregatesInput | VentaScalarWhereWithAggregatesInput[]
    OR?: VentaScalarWhereWithAggregatesInput[]
    NOT?: VentaScalarWhereWithAggregatesInput | VentaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Venta"> | string
    compradorNombre?: StringWithAggregatesFilter<"Venta"> | string
    compradorEmail?: StringWithAggregatesFilter<"Venta"> | string
    fechaVenta?: DateTimeWithAggregatesFilter<"Venta"> | Date | string
  }

  export type ButacaWhereInput = {
    AND?: ButacaWhereInput | ButacaWhereInput[]
    OR?: ButacaWhereInput[]
    NOT?: ButacaWhereInput | ButacaWhereInput[]
    id?: IntFilter<"Butaca"> | number
    fila?: StringFilter<"Butaca"> | string
    columna?: IntFilter<"Butaca"> | number
    zonaId?: IntFilter<"Butaca"> | number
    disponible?: BoolFilter<"Butaca"> | boolean
    estadoReserva?: StringNullableFilter<"Butaca"> | string | null
    reservaHasta?: DateTimeNullableFilter<"Butaca"> | Date | string | null
    reservaId?: StringNullableFilter<"Butaca"> | string | null
    compradorTemp?: StringNullableFilter<"Butaca"> | string | null
    ventaId?: StringNullableFilter<"Butaca"> | string | null
    zona?: XOR<ZonaRelationFilter, ZonaWhereInput>
    venta?: XOR<VentaNullableRelationFilter, VentaWhereInput> | null
  }

  export type ButacaOrderByWithRelationInput = {
    id?: SortOrder
    fila?: SortOrder
    columna?: SortOrder
    zonaId?: SortOrder
    disponible?: SortOrder
    estadoReserva?: SortOrderInput | SortOrder
    reservaHasta?: SortOrderInput | SortOrder
    reservaId?: SortOrderInput | SortOrder
    compradorTemp?: SortOrderInput | SortOrder
    ventaId?: SortOrderInput | SortOrder
    zona?: ZonaOrderByWithRelationInput
    venta?: VentaOrderByWithRelationInput
  }

  export type ButacaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    fila_columna?: ButacaFilaColumnaCompoundUniqueInput
    AND?: ButacaWhereInput | ButacaWhereInput[]
    OR?: ButacaWhereInput[]
    NOT?: ButacaWhereInput | ButacaWhereInput[]
    fila?: StringFilter<"Butaca"> | string
    columna?: IntFilter<"Butaca"> | number
    zonaId?: IntFilter<"Butaca"> | number
    disponible?: BoolFilter<"Butaca"> | boolean
    estadoReserva?: StringNullableFilter<"Butaca"> | string | null
    reservaHasta?: DateTimeNullableFilter<"Butaca"> | Date | string | null
    reservaId?: StringNullableFilter<"Butaca"> | string | null
    compradorTemp?: StringNullableFilter<"Butaca"> | string | null
    ventaId?: StringNullableFilter<"Butaca"> | string | null
    zona?: XOR<ZonaRelationFilter, ZonaWhereInput>
    venta?: XOR<VentaNullableRelationFilter, VentaWhereInput> | null
  }, "id" | "fila_columna">

  export type ButacaOrderByWithAggregationInput = {
    id?: SortOrder
    fila?: SortOrder
    columna?: SortOrder
    zonaId?: SortOrder
    disponible?: SortOrder
    estadoReserva?: SortOrderInput | SortOrder
    reservaHasta?: SortOrderInput | SortOrder
    reservaId?: SortOrderInput | SortOrder
    compradorTemp?: SortOrderInput | SortOrder
    ventaId?: SortOrderInput | SortOrder
    _count?: ButacaCountOrderByAggregateInput
    _avg?: ButacaAvgOrderByAggregateInput
    _max?: ButacaMaxOrderByAggregateInput
    _min?: ButacaMinOrderByAggregateInput
    _sum?: ButacaSumOrderByAggregateInput
  }

  export type ButacaScalarWhereWithAggregatesInput = {
    AND?: ButacaScalarWhereWithAggregatesInput | ButacaScalarWhereWithAggregatesInput[]
    OR?: ButacaScalarWhereWithAggregatesInput[]
    NOT?: ButacaScalarWhereWithAggregatesInput | ButacaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Butaca"> | number
    fila?: StringWithAggregatesFilter<"Butaca"> | string
    columna?: IntWithAggregatesFilter<"Butaca"> | number
    zonaId?: IntWithAggregatesFilter<"Butaca"> | number
    disponible?: BoolWithAggregatesFilter<"Butaca"> | boolean
    estadoReserva?: StringNullableWithAggregatesFilter<"Butaca"> | string | null
    reservaHasta?: DateTimeNullableWithAggregatesFilter<"Butaca"> | Date | string | null
    reservaId?: StringNullableWithAggregatesFilter<"Butaca"> | string | null
    compradorTemp?: StringNullableWithAggregatesFilter<"Butaca"> | string | null
    ventaId?: StringNullableWithAggregatesFilter<"Butaca"> | string | null
  }

  export type ZonaCreateInput = {
    nombre: string
    precio: number
    color: string
    butacas?: ButacaCreateNestedManyWithoutZonaInput
  }

  export type ZonaUncheckedCreateInput = {
    id?: number
    nombre: string
    precio: number
    color: string
    butacas?: ButacaUncheckedCreateNestedManyWithoutZonaInput
  }

  export type ZonaUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    butacas?: ButacaUpdateManyWithoutZonaNestedInput
  }

  export type ZonaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    butacas?: ButacaUncheckedUpdateManyWithoutZonaNestedInput
  }

  export type ZonaCreateManyInput = {
    id?: number
    nombre: string
    precio: number
    color: string
  }

  export type ZonaUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
  }

  export type ZonaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
  }

  export type VentaCreateInput = {
    id?: string
    compradorNombre: string
    compradorEmail: string
    fechaVenta?: Date | string
    butacas?: ButacaCreateNestedManyWithoutVentaInput
  }

  export type VentaUncheckedCreateInput = {
    id?: string
    compradorNombre: string
    compradorEmail: string
    fechaVenta?: Date | string
    butacas?: ButacaUncheckedCreateNestedManyWithoutVentaInput
  }

  export type VentaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    compradorNombre?: StringFieldUpdateOperationsInput | string
    compradorEmail?: StringFieldUpdateOperationsInput | string
    fechaVenta?: DateTimeFieldUpdateOperationsInput | Date | string
    butacas?: ButacaUpdateManyWithoutVentaNestedInput
  }

  export type VentaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    compradorNombre?: StringFieldUpdateOperationsInput | string
    compradorEmail?: StringFieldUpdateOperationsInput | string
    fechaVenta?: DateTimeFieldUpdateOperationsInput | Date | string
    butacas?: ButacaUncheckedUpdateManyWithoutVentaNestedInput
  }

  export type VentaCreateManyInput = {
    id?: string
    compradorNombre: string
    compradorEmail: string
    fechaVenta?: Date | string
  }

  export type VentaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    compradorNombre?: StringFieldUpdateOperationsInput | string
    compradorEmail?: StringFieldUpdateOperationsInput | string
    fechaVenta?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VentaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    compradorNombre?: StringFieldUpdateOperationsInput | string
    compradorEmail?: StringFieldUpdateOperationsInput | string
    fechaVenta?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ButacaCreateInput = {
    fila: string
    columna: number
    disponible?: boolean
    estadoReserva?: string | null
    reservaHasta?: Date | string | null
    reservaId?: string | null
    compradorTemp?: string | null
    zona: ZonaCreateNestedOneWithoutButacasInput
    venta?: VentaCreateNestedOneWithoutButacasInput
  }

  export type ButacaUncheckedCreateInput = {
    id?: number
    fila: string
    columna: number
    zonaId: number
    disponible?: boolean
    estadoReserva?: string | null
    reservaHasta?: Date | string | null
    reservaId?: string | null
    compradorTemp?: string | null
    ventaId?: string | null
  }

  export type ButacaUpdateInput = {
    fila?: StringFieldUpdateOperationsInput | string
    columna?: IntFieldUpdateOperationsInput | number
    disponible?: BoolFieldUpdateOperationsInput | boolean
    estadoReserva?: NullableStringFieldUpdateOperationsInput | string | null
    reservaHasta?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reservaId?: NullableStringFieldUpdateOperationsInput | string | null
    compradorTemp?: NullableStringFieldUpdateOperationsInput | string | null
    zona?: ZonaUpdateOneRequiredWithoutButacasNestedInput
    venta?: VentaUpdateOneWithoutButacasNestedInput
  }

  export type ButacaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fila?: StringFieldUpdateOperationsInput | string
    columna?: IntFieldUpdateOperationsInput | number
    zonaId?: IntFieldUpdateOperationsInput | number
    disponible?: BoolFieldUpdateOperationsInput | boolean
    estadoReserva?: NullableStringFieldUpdateOperationsInput | string | null
    reservaHasta?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reservaId?: NullableStringFieldUpdateOperationsInput | string | null
    compradorTemp?: NullableStringFieldUpdateOperationsInput | string | null
    ventaId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ButacaCreateManyInput = {
    id?: number
    fila: string
    columna: number
    zonaId: number
    disponible?: boolean
    estadoReserva?: string | null
    reservaHasta?: Date | string | null
    reservaId?: string | null
    compradorTemp?: string | null
    ventaId?: string | null
  }

  export type ButacaUpdateManyMutationInput = {
    fila?: StringFieldUpdateOperationsInput | string
    columna?: IntFieldUpdateOperationsInput | number
    disponible?: BoolFieldUpdateOperationsInput | boolean
    estadoReserva?: NullableStringFieldUpdateOperationsInput | string | null
    reservaHasta?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reservaId?: NullableStringFieldUpdateOperationsInput | string | null
    compradorTemp?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ButacaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fila?: StringFieldUpdateOperationsInput | string
    columna?: IntFieldUpdateOperationsInput | number
    zonaId?: IntFieldUpdateOperationsInput | number
    disponible?: BoolFieldUpdateOperationsInput | boolean
    estadoReserva?: NullableStringFieldUpdateOperationsInput | string | null
    reservaHasta?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reservaId?: NullableStringFieldUpdateOperationsInput | string | null
    compradorTemp?: NullableStringFieldUpdateOperationsInput | string | null
    ventaId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type ButacaListRelationFilter = {
    every?: ButacaWhereInput
    some?: ButacaWhereInput
    none?: ButacaWhereInput
  }

  export type ButacaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ZonaCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    precio?: SortOrder
    color?: SortOrder
  }

  export type ZonaAvgOrderByAggregateInput = {
    id?: SortOrder
    precio?: SortOrder
  }

  export type ZonaMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    precio?: SortOrder
    color?: SortOrder
  }

  export type ZonaMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    precio?: SortOrder
    color?: SortOrder
  }

  export type ZonaSumOrderByAggregateInput = {
    id?: SortOrder
    precio?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type VentaCountOrderByAggregateInput = {
    id?: SortOrder
    compradorNombre?: SortOrder
    compradorEmail?: SortOrder
    fechaVenta?: SortOrder
  }

  export type VentaMaxOrderByAggregateInput = {
    id?: SortOrder
    compradorNombre?: SortOrder
    compradorEmail?: SortOrder
    fechaVenta?: SortOrder
  }

  export type VentaMinOrderByAggregateInput = {
    id?: SortOrder
    compradorNombre?: SortOrder
    compradorEmail?: SortOrder
    fechaVenta?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ZonaRelationFilter = {
    is?: ZonaWhereInput
    isNot?: ZonaWhereInput
  }

  export type VentaNullableRelationFilter = {
    is?: VentaWhereInput | null
    isNot?: VentaWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ButacaFilaColumnaCompoundUniqueInput = {
    fila: string
    columna: number
  }

  export type ButacaCountOrderByAggregateInput = {
    id?: SortOrder
    fila?: SortOrder
    columna?: SortOrder
    zonaId?: SortOrder
    disponible?: SortOrder
    estadoReserva?: SortOrder
    reservaHasta?: SortOrder
    reservaId?: SortOrder
    compradorTemp?: SortOrder
    ventaId?: SortOrder
  }

  export type ButacaAvgOrderByAggregateInput = {
    id?: SortOrder
    columna?: SortOrder
    zonaId?: SortOrder
  }

  export type ButacaMaxOrderByAggregateInput = {
    id?: SortOrder
    fila?: SortOrder
    columna?: SortOrder
    zonaId?: SortOrder
    disponible?: SortOrder
    estadoReserva?: SortOrder
    reservaHasta?: SortOrder
    reservaId?: SortOrder
    compradorTemp?: SortOrder
    ventaId?: SortOrder
  }

  export type ButacaMinOrderByAggregateInput = {
    id?: SortOrder
    fila?: SortOrder
    columna?: SortOrder
    zonaId?: SortOrder
    disponible?: SortOrder
    estadoReserva?: SortOrder
    reservaHasta?: SortOrder
    reservaId?: SortOrder
    compradorTemp?: SortOrder
    ventaId?: SortOrder
  }

  export type ButacaSumOrderByAggregateInput = {
    id?: SortOrder
    columna?: SortOrder
    zonaId?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type ButacaCreateNestedManyWithoutZonaInput = {
    create?: XOR<ButacaCreateWithoutZonaInput, ButacaUncheckedCreateWithoutZonaInput> | ButacaCreateWithoutZonaInput[] | ButacaUncheckedCreateWithoutZonaInput[]
    connectOrCreate?: ButacaCreateOrConnectWithoutZonaInput | ButacaCreateOrConnectWithoutZonaInput[]
    createMany?: ButacaCreateManyZonaInputEnvelope
    connect?: ButacaWhereUniqueInput | ButacaWhereUniqueInput[]
  }

  export type ButacaUncheckedCreateNestedManyWithoutZonaInput = {
    create?: XOR<ButacaCreateWithoutZonaInput, ButacaUncheckedCreateWithoutZonaInput> | ButacaCreateWithoutZonaInput[] | ButacaUncheckedCreateWithoutZonaInput[]
    connectOrCreate?: ButacaCreateOrConnectWithoutZonaInput | ButacaCreateOrConnectWithoutZonaInput[]
    createMany?: ButacaCreateManyZonaInputEnvelope
    connect?: ButacaWhereUniqueInput | ButacaWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ButacaUpdateManyWithoutZonaNestedInput = {
    create?: XOR<ButacaCreateWithoutZonaInput, ButacaUncheckedCreateWithoutZonaInput> | ButacaCreateWithoutZonaInput[] | ButacaUncheckedCreateWithoutZonaInput[]
    connectOrCreate?: ButacaCreateOrConnectWithoutZonaInput | ButacaCreateOrConnectWithoutZonaInput[]
    upsert?: ButacaUpsertWithWhereUniqueWithoutZonaInput | ButacaUpsertWithWhereUniqueWithoutZonaInput[]
    createMany?: ButacaCreateManyZonaInputEnvelope
    set?: ButacaWhereUniqueInput | ButacaWhereUniqueInput[]
    disconnect?: ButacaWhereUniqueInput | ButacaWhereUniqueInput[]
    delete?: ButacaWhereUniqueInput | ButacaWhereUniqueInput[]
    connect?: ButacaWhereUniqueInput | ButacaWhereUniqueInput[]
    update?: ButacaUpdateWithWhereUniqueWithoutZonaInput | ButacaUpdateWithWhereUniqueWithoutZonaInput[]
    updateMany?: ButacaUpdateManyWithWhereWithoutZonaInput | ButacaUpdateManyWithWhereWithoutZonaInput[]
    deleteMany?: ButacaScalarWhereInput | ButacaScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ButacaUncheckedUpdateManyWithoutZonaNestedInput = {
    create?: XOR<ButacaCreateWithoutZonaInput, ButacaUncheckedCreateWithoutZonaInput> | ButacaCreateWithoutZonaInput[] | ButacaUncheckedCreateWithoutZonaInput[]
    connectOrCreate?: ButacaCreateOrConnectWithoutZonaInput | ButacaCreateOrConnectWithoutZonaInput[]
    upsert?: ButacaUpsertWithWhereUniqueWithoutZonaInput | ButacaUpsertWithWhereUniqueWithoutZonaInput[]
    createMany?: ButacaCreateManyZonaInputEnvelope
    set?: ButacaWhereUniqueInput | ButacaWhereUniqueInput[]
    disconnect?: ButacaWhereUniqueInput | ButacaWhereUniqueInput[]
    delete?: ButacaWhereUniqueInput | ButacaWhereUniqueInput[]
    connect?: ButacaWhereUniqueInput | ButacaWhereUniqueInput[]
    update?: ButacaUpdateWithWhereUniqueWithoutZonaInput | ButacaUpdateWithWhereUniqueWithoutZonaInput[]
    updateMany?: ButacaUpdateManyWithWhereWithoutZonaInput | ButacaUpdateManyWithWhereWithoutZonaInput[]
    deleteMany?: ButacaScalarWhereInput | ButacaScalarWhereInput[]
  }

  export type ButacaCreateNestedManyWithoutVentaInput = {
    create?: XOR<ButacaCreateWithoutVentaInput, ButacaUncheckedCreateWithoutVentaInput> | ButacaCreateWithoutVentaInput[] | ButacaUncheckedCreateWithoutVentaInput[]
    connectOrCreate?: ButacaCreateOrConnectWithoutVentaInput | ButacaCreateOrConnectWithoutVentaInput[]
    createMany?: ButacaCreateManyVentaInputEnvelope
    connect?: ButacaWhereUniqueInput | ButacaWhereUniqueInput[]
  }

  export type ButacaUncheckedCreateNestedManyWithoutVentaInput = {
    create?: XOR<ButacaCreateWithoutVentaInput, ButacaUncheckedCreateWithoutVentaInput> | ButacaCreateWithoutVentaInput[] | ButacaUncheckedCreateWithoutVentaInput[]
    connectOrCreate?: ButacaCreateOrConnectWithoutVentaInput | ButacaCreateOrConnectWithoutVentaInput[]
    createMany?: ButacaCreateManyVentaInputEnvelope
    connect?: ButacaWhereUniqueInput | ButacaWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ButacaUpdateManyWithoutVentaNestedInput = {
    create?: XOR<ButacaCreateWithoutVentaInput, ButacaUncheckedCreateWithoutVentaInput> | ButacaCreateWithoutVentaInput[] | ButacaUncheckedCreateWithoutVentaInput[]
    connectOrCreate?: ButacaCreateOrConnectWithoutVentaInput | ButacaCreateOrConnectWithoutVentaInput[]
    upsert?: ButacaUpsertWithWhereUniqueWithoutVentaInput | ButacaUpsertWithWhereUniqueWithoutVentaInput[]
    createMany?: ButacaCreateManyVentaInputEnvelope
    set?: ButacaWhereUniqueInput | ButacaWhereUniqueInput[]
    disconnect?: ButacaWhereUniqueInput | ButacaWhereUniqueInput[]
    delete?: ButacaWhereUniqueInput | ButacaWhereUniqueInput[]
    connect?: ButacaWhereUniqueInput | ButacaWhereUniqueInput[]
    update?: ButacaUpdateWithWhereUniqueWithoutVentaInput | ButacaUpdateWithWhereUniqueWithoutVentaInput[]
    updateMany?: ButacaUpdateManyWithWhereWithoutVentaInput | ButacaUpdateManyWithWhereWithoutVentaInput[]
    deleteMany?: ButacaScalarWhereInput | ButacaScalarWhereInput[]
  }

  export type ButacaUncheckedUpdateManyWithoutVentaNestedInput = {
    create?: XOR<ButacaCreateWithoutVentaInput, ButacaUncheckedCreateWithoutVentaInput> | ButacaCreateWithoutVentaInput[] | ButacaUncheckedCreateWithoutVentaInput[]
    connectOrCreate?: ButacaCreateOrConnectWithoutVentaInput | ButacaCreateOrConnectWithoutVentaInput[]
    upsert?: ButacaUpsertWithWhereUniqueWithoutVentaInput | ButacaUpsertWithWhereUniqueWithoutVentaInput[]
    createMany?: ButacaCreateManyVentaInputEnvelope
    set?: ButacaWhereUniqueInput | ButacaWhereUniqueInput[]
    disconnect?: ButacaWhereUniqueInput | ButacaWhereUniqueInput[]
    delete?: ButacaWhereUniqueInput | ButacaWhereUniqueInput[]
    connect?: ButacaWhereUniqueInput | ButacaWhereUniqueInput[]
    update?: ButacaUpdateWithWhereUniqueWithoutVentaInput | ButacaUpdateWithWhereUniqueWithoutVentaInput[]
    updateMany?: ButacaUpdateManyWithWhereWithoutVentaInput | ButacaUpdateManyWithWhereWithoutVentaInput[]
    deleteMany?: ButacaScalarWhereInput | ButacaScalarWhereInput[]
  }

  export type ZonaCreateNestedOneWithoutButacasInput = {
    create?: XOR<ZonaCreateWithoutButacasInput, ZonaUncheckedCreateWithoutButacasInput>
    connectOrCreate?: ZonaCreateOrConnectWithoutButacasInput
    connect?: ZonaWhereUniqueInput
  }

  export type VentaCreateNestedOneWithoutButacasInput = {
    create?: XOR<VentaCreateWithoutButacasInput, VentaUncheckedCreateWithoutButacasInput>
    connectOrCreate?: VentaCreateOrConnectWithoutButacasInput
    connect?: VentaWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type ZonaUpdateOneRequiredWithoutButacasNestedInput = {
    create?: XOR<ZonaCreateWithoutButacasInput, ZonaUncheckedCreateWithoutButacasInput>
    connectOrCreate?: ZonaCreateOrConnectWithoutButacasInput
    upsert?: ZonaUpsertWithoutButacasInput
    connect?: ZonaWhereUniqueInput
    update?: XOR<XOR<ZonaUpdateToOneWithWhereWithoutButacasInput, ZonaUpdateWithoutButacasInput>, ZonaUncheckedUpdateWithoutButacasInput>
  }

  export type VentaUpdateOneWithoutButacasNestedInput = {
    create?: XOR<VentaCreateWithoutButacasInput, VentaUncheckedCreateWithoutButacasInput>
    connectOrCreate?: VentaCreateOrConnectWithoutButacasInput
    upsert?: VentaUpsertWithoutButacasInput
    disconnect?: VentaWhereInput | boolean
    delete?: VentaWhereInput | boolean
    connect?: VentaWhereUniqueInput
    update?: XOR<XOR<VentaUpdateToOneWithWhereWithoutButacasInput, VentaUpdateWithoutButacasInput>, VentaUncheckedUpdateWithoutButacasInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type ButacaCreateWithoutZonaInput = {
    fila: string
    columna: number
    disponible?: boolean
    estadoReserva?: string | null
    reservaHasta?: Date | string | null
    reservaId?: string | null
    compradorTemp?: string | null
    venta?: VentaCreateNestedOneWithoutButacasInput
  }

  export type ButacaUncheckedCreateWithoutZonaInput = {
    id?: number
    fila: string
    columna: number
    disponible?: boolean
    estadoReserva?: string | null
    reservaHasta?: Date | string | null
    reservaId?: string | null
    compradorTemp?: string | null
    ventaId?: string | null
  }

  export type ButacaCreateOrConnectWithoutZonaInput = {
    where: ButacaWhereUniqueInput
    create: XOR<ButacaCreateWithoutZonaInput, ButacaUncheckedCreateWithoutZonaInput>
  }

  export type ButacaCreateManyZonaInputEnvelope = {
    data: ButacaCreateManyZonaInput | ButacaCreateManyZonaInput[]
  }

  export type ButacaUpsertWithWhereUniqueWithoutZonaInput = {
    where: ButacaWhereUniqueInput
    update: XOR<ButacaUpdateWithoutZonaInput, ButacaUncheckedUpdateWithoutZonaInput>
    create: XOR<ButacaCreateWithoutZonaInput, ButacaUncheckedCreateWithoutZonaInput>
  }

  export type ButacaUpdateWithWhereUniqueWithoutZonaInput = {
    where: ButacaWhereUniqueInput
    data: XOR<ButacaUpdateWithoutZonaInput, ButacaUncheckedUpdateWithoutZonaInput>
  }

  export type ButacaUpdateManyWithWhereWithoutZonaInput = {
    where: ButacaScalarWhereInput
    data: XOR<ButacaUpdateManyMutationInput, ButacaUncheckedUpdateManyWithoutZonaInput>
  }

  export type ButacaScalarWhereInput = {
    AND?: ButacaScalarWhereInput | ButacaScalarWhereInput[]
    OR?: ButacaScalarWhereInput[]
    NOT?: ButacaScalarWhereInput | ButacaScalarWhereInput[]
    id?: IntFilter<"Butaca"> | number
    fila?: StringFilter<"Butaca"> | string
    columna?: IntFilter<"Butaca"> | number
    zonaId?: IntFilter<"Butaca"> | number
    disponible?: BoolFilter<"Butaca"> | boolean
    estadoReserva?: StringNullableFilter<"Butaca"> | string | null
    reservaHasta?: DateTimeNullableFilter<"Butaca"> | Date | string | null
    reservaId?: StringNullableFilter<"Butaca"> | string | null
    compradorTemp?: StringNullableFilter<"Butaca"> | string | null
    ventaId?: StringNullableFilter<"Butaca"> | string | null
  }

  export type ButacaCreateWithoutVentaInput = {
    fila: string
    columna: number
    disponible?: boolean
    estadoReserva?: string | null
    reservaHasta?: Date | string | null
    reservaId?: string | null
    compradorTemp?: string | null
    zona: ZonaCreateNestedOneWithoutButacasInput
  }

  export type ButacaUncheckedCreateWithoutVentaInput = {
    id?: number
    fila: string
    columna: number
    zonaId: number
    disponible?: boolean
    estadoReserva?: string | null
    reservaHasta?: Date | string | null
    reservaId?: string | null
    compradorTemp?: string | null
  }

  export type ButacaCreateOrConnectWithoutVentaInput = {
    where: ButacaWhereUniqueInput
    create: XOR<ButacaCreateWithoutVentaInput, ButacaUncheckedCreateWithoutVentaInput>
  }

  export type ButacaCreateManyVentaInputEnvelope = {
    data: ButacaCreateManyVentaInput | ButacaCreateManyVentaInput[]
  }

  export type ButacaUpsertWithWhereUniqueWithoutVentaInput = {
    where: ButacaWhereUniqueInput
    update: XOR<ButacaUpdateWithoutVentaInput, ButacaUncheckedUpdateWithoutVentaInput>
    create: XOR<ButacaCreateWithoutVentaInput, ButacaUncheckedCreateWithoutVentaInput>
  }

  export type ButacaUpdateWithWhereUniqueWithoutVentaInput = {
    where: ButacaWhereUniqueInput
    data: XOR<ButacaUpdateWithoutVentaInput, ButacaUncheckedUpdateWithoutVentaInput>
  }

  export type ButacaUpdateManyWithWhereWithoutVentaInput = {
    where: ButacaScalarWhereInput
    data: XOR<ButacaUpdateManyMutationInput, ButacaUncheckedUpdateManyWithoutVentaInput>
  }

  export type ZonaCreateWithoutButacasInput = {
    nombre: string
    precio: number
    color: string
  }

  export type ZonaUncheckedCreateWithoutButacasInput = {
    id?: number
    nombre: string
    precio: number
    color: string
  }

  export type ZonaCreateOrConnectWithoutButacasInput = {
    where: ZonaWhereUniqueInput
    create: XOR<ZonaCreateWithoutButacasInput, ZonaUncheckedCreateWithoutButacasInput>
  }

  export type VentaCreateWithoutButacasInput = {
    id?: string
    compradorNombre: string
    compradorEmail: string
    fechaVenta?: Date | string
  }

  export type VentaUncheckedCreateWithoutButacasInput = {
    id?: string
    compradorNombre: string
    compradorEmail: string
    fechaVenta?: Date | string
  }

  export type VentaCreateOrConnectWithoutButacasInput = {
    where: VentaWhereUniqueInput
    create: XOR<VentaCreateWithoutButacasInput, VentaUncheckedCreateWithoutButacasInput>
  }

  export type ZonaUpsertWithoutButacasInput = {
    update: XOR<ZonaUpdateWithoutButacasInput, ZonaUncheckedUpdateWithoutButacasInput>
    create: XOR<ZonaCreateWithoutButacasInput, ZonaUncheckedCreateWithoutButacasInput>
    where?: ZonaWhereInput
  }

  export type ZonaUpdateToOneWithWhereWithoutButacasInput = {
    where?: ZonaWhereInput
    data: XOR<ZonaUpdateWithoutButacasInput, ZonaUncheckedUpdateWithoutButacasInput>
  }

  export type ZonaUpdateWithoutButacasInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
  }

  export type ZonaUncheckedUpdateWithoutButacasInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
  }

  export type VentaUpsertWithoutButacasInput = {
    update: XOR<VentaUpdateWithoutButacasInput, VentaUncheckedUpdateWithoutButacasInput>
    create: XOR<VentaCreateWithoutButacasInput, VentaUncheckedCreateWithoutButacasInput>
    where?: VentaWhereInput
  }

  export type VentaUpdateToOneWithWhereWithoutButacasInput = {
    where?: VentaWhereInput
    data: XOR<VentaUpdateWithoutButacasInput, VentaUncheckedUpdateWithoutButacasInput>
  }

  export type VentaUpdateWithoutButacasInput = {
    id?: StringFieldUpdateOperationsInput | string
    compradorNombre?: StringFieldUpdateOperationsInput | string
    compradorEmail?: StringFieldUpdateOperationsInput | string
    fechaVenta?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VentaUncheckedUpdateWithoutButacasInput = {
    id?: StringFieldUpdateOperationsInput | string
    compradorNombre?: StringFieldUpdateOperationsInput | string
    compradorEmail?: StringFieldUpdateOperationsInput | string
    fechaVenta?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ButacaCreateManyZonaInput = {
    id?: number
    fila: string
    columna: number
    disponible?: boolean
    estadoReserva?: string | null
    reservaHasta?: Date | string | null
    reservaId?: string | null
    compradorTemp?: string | null
    ventaId?: string | null
  }

  export type ButacaUpdateWithoutZonaInput = {
    fila?: StringFieldUpdateOperationsInput | string
    columna?: IntFieldUpdateOperationsInput | number
    disponible?: BoolFieldUpdateOperationsInput | boolean
    estadoReserva?: NullableStringFieldUpdateOperationsInput | string | null
    reservaHasta?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reservaId?: NullableStringFieldUpdateOperationsInput | string | null
    compradorTemp?: NullableStringFieldUpdateOperationsInput | string | null
    venta?: VentaUpdateOneWithoutButacasNestedInput
  }

  export type ButacaUncheckedUpdateWithoutZonaInput = {
    id?: IntFieldUpdateOperationsInput | number
    fila?: StringFieldUpdateOperationsInput | string
    columna?: IntFieldUpdateOperationsInput | number
    disponible?: BoolFieldUpdateOperationsInput | boolean
    estadoReserva?: NullableStringFieldUpdateOperationsInput | string | null
    reservaHasta?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reservaId?: NullableStringFieldUpdateOperationsInput | string | null
    compradorTemp?: NullableStringFieldUpdateOperationsInput | string | null
    ventaId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ButacaUncheckedUpdateManyWithoutZonaInput = {
    id?: IntFieldUpdateOperationsInput | number
    fila?: StringFieldUpdateOperationsInput | string
    columna?: IntFieldUpdateOperationsInput | number
    disponible?: BoolFieldUpdateOperationsInput | boolean
    estadoReserva?: NullableStringFieldUpdateOperationsInput | string | null
    reservaHasta?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reservaId?: NullableStringFieldUpdateOperationsInput | string | null
    compradorTemp?: NullableStringFieldUpdateOperationsInput | string | null
    ventaId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ButacaCreateManyVentaInput = {
    id?: number
    fila: string
    columna: number
    zonaId: number
    disponible?: boolean
    estadoReserva?: string | null
    reservaHasta?: Date | string | null
    reservaId?: string | null
    compradorTemp?: string | null
  }

  export type ButacaUpdateWithoutVentaInput = {
    fila?: StringFieldUpdateOperationsInput | string
    columna?: IntFieldUpdateOperationsInput | number
    disponible?: BoolFieldUpdateOperationsInput | boolean
    estadoReserva?: NullableStringFieldUpdateOperationsInput | string | null
    reservaHasta?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reservaId?: NullableStringFieldUpdateOperationsInput | string | null
    compradorTemp?: NullableStringFieldUpdateOperationsInput | string | null
    zona?: ZonaUpdateOneRequiredWithoutButacasNestedInput
  }

  export type ButacaUncheckedUpdateWithoutVentaInput = {
    id?: IntFieldUpdateOperationsInput | number
    fila?: StringFieldUpdateOperationsInput | string
    columna?: IntFieldUpdateOperationsInput | number
    zonaId?: IntFieldUpdateOperationsInput | number
    disponible?: BoolFieldUpdateOperationsInput | boolean
    estadoReserva?: NullableStringFieldUpdateOperationsInput | string | null
    reservaHasta?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reservaId?: NullableStringFieldUpdateOperationsInput | string | null
    compradorTemp?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ButacaUncheckedUpdateManyWithoutVentaInput = {
    id?: IntFieldUpdateOperationsInput | number
    fila?: StringFieldUpdateOperationsInput | string
    columna?: IntFieldUpdateOperationsInput | number
    zonaId?: IntFieldUpdateOperationsInput | number
    disponible?: BoolFieldUpdateOperationsInput | boolean
    estadoReserva?: NullableStringFieldUpdateOperationsInput | string | null
    reservaHasta?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reservaId?: NullableStringFieldUpdateOperationsInput | string | null
    compradorTemp?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use ZonaCountOutputTypeDefaultArgs instead
     */
    export type ZonaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ZonaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VentaCountOutputTypeDefaultArgs instead
     */
    export type VentaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VentaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ZonaDefaultArgs instead
     */
    export type ZonaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ZonaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VentaDefaultArgs instead
     */
    export type VentaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VentaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ButacaDefaultArgs instead
     */
    export type ButacaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ButacaDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}